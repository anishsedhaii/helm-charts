apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Values.job.name }}
  namespace: {{ .Values.nameOverride }}
spec:
  schedule: "0 /8 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: {{ .Values.clusterrole.serviceaccount.name }}
          containers:
          - name: {{ .Values.container.name }}
            image: {{ .Values.image.repository }}
            env:
              - name: AWS_DEFAULT_REGION
                value: {{ .Values.cluster.region }}
              - name: CLUSTER_NAME
                value: {{ .Values.cluster.name }}
              - name: EXCLUDE_NAMESPACES
                value: | 
                    {{- range .Values.excludeNamespaces }}
                      {{ . }}
                    {{- end }}
              - name: SECRET_NAME
                value: {{ .Values.secret.name }}
            command:
              - bash
              - "-c"
              - |                
                AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
                TOKEN=$(aws ecr --region=$AWS_DEFAULT_REGION get-authorization-token --output text --query authorizationData[].authorizationToken | base64 -d | cut -d: -f2)     
                NAMESPACES=$(kubectl get ns -o jsonpath="{.items[*].metadata.name}")
                echo "NAMESPACES: $NAMESPACES"
                for NS in ${NAMESPACES[@]}; do
                    skip=false
                    for excluded_ns in ${EXCLUDE_NAMESPACES[@]}; do
                      if [[ "$NS" == "$excluded_ns" ]]; then
                        skip=true
                        break
                      fi
                    done

                    if [[ "$skip" == true ]]; then
                      echo "-> Skipping namespace: $NS"
                      continue
                    fi
                   echo "-> Refreshing secrets in namespace: $NS"
                   kubectl -n $NS delete secret --ignore-not-found "$SECRET_NAME"
                   kubectl -n $NS create secret docker-registry "$SECRET_NAME" --docker-server=https://$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com --docker-username=AWS --docker-password="$TOKEN"
                   echo
                done
          restartPolicy: OnFailure
